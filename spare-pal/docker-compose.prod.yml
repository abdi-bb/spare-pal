version: "3.9"

services:
  db:
    image: postgres:latest
    container_name: sparepal_db
    restart: always
    ports:
      - "5444:5432"
    # environment:
    #   # Create postgres db super user with password
    #   - POSTGRES_USER=${POSTGRES_USER}
    #   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #   - POSTGRES_DB=${POSTGRES_DB}
    #   # Specify project db user, project db and db password
    #   - DB_NAME=test_db
    #   - DB_USERNAME=test_usr
    #   - DB_PASSWORD=test_pwd
    #   - DB_HOSTNAME=db
    #   - DB_PORT=5432
    env_file:
      - ./.env
    volumes:
      - db-data:/var/lib/postgresql/data
      # Create project db user, project db and give privileges to the user on the db
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: always

  web:
    container_name: sparepal_webapp
    build: .
    restart: always
    ports:
      - "8000:8000"
    # environment:
    #   - HOST=db
    #   - PORT=5432
    #   - USER=test_usr
    #   - PASSWORD=test_pwd
    env_file:
      - ./.env
    expose:
      - 8000
    volumes:
      - webapp_static_data:/app/static
      - webapp_media_data:/app/media
    depends_on:
      - redis
      - db
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000

  celery:
    container_name: celery
    build: .
    restart: always
    env_file:
      - ./.env
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      - web
    command: celery -A core worker -l info

  nginx:
    container_name: nginx
    build: ./nginx
    restart: always
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - webapp_static_data:/app/static
      - webapp_media_data:/app/media
    depends_on:
      - web

volumes:
  db-data:
  webapp_static_data:
  webapp_media_data: